// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// serial_density
NumericVector serial_density(double p1, double p2);
RcppExport SEXP _hhdynamics_serial_density(SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(serial_density(p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// prior_loglik
double prior_loglik(NumericVector para);
RcppExport SEXP _hhdynamics_prior_loglik(SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_loglik(para));
    return rcpp_result_gen;
END_RCPP
}
// sim_data
List sim_data(NumericMatrix data1, NumericVector SI, NumericVector para, int n_inf, int n_sus, int with_rm, int sep1, int sep2);
RcppExport SEXP _hhdynamics_sim_data(SEXP data1SEXP, SEXP SISEXP, SEXP paraSEXP, SEXP n_infSEXP, SEXP n_susSEXP, SEXP with_rmSEXP, SEXP sep1SEXP, SEXP sep2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SI(SISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< int >::type n_inf(n_infSEXP);
    Rcpp::traits::input_parameter< int >::type n_sus(n_susSEXP);
    Rcpp::traits::input_parameter< int >::type with_rm(with_rmSEXP);
    Rcpp::traits::input_parameter< int >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< int >::type sep2(sep2SEXP);
    rcpp_result_gen = Rcpp::wrap(sim_data(data1, SI, para, n_inf, n_sus, with_rm, sep1, sep2));
    return rcpp_result_gen;
END_RCPP
}
// loglik
List loglik(NumericMatrix data, NumericVector SI, NumericVector para, int n_inf, int n_sus, int with_rm, int sep1, int sep2);
RcppExport SEXP _hhdynamics_loglik(SEXP dataSEXP, SEXP SISEXP, SEXP paraSEXP, SEXP n_infSEXP, SEXP n_susSEXP, SEXP with_rmSEXP, SEXP sep1SEXP, SEXP sep2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SI(SISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< int >::type n_inf(n_infSEXP);
    Rcpp::traits::input_parameter< int >::type n_sus(n_susSEXP);
    Rcpp::traits::input_parameter< int >::type with_rm(with_rmSEXP);
    Rcpp::traits::input_parameter< int >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< int >::type sep2(sep2SEXP);
    rcpp_result_gen = Rcpp::wrap(loglik(data, SI, para, n_inf, n_sus, with_rm, sep1, sep2));
    return rcpp_result_gen;
END_RCPP
}
// all_update
List all_update(NumericMatrix data, NumericMatrix dataorg, NumericVector SI, NumericVector para, int member, NumericMatrix loglik1, NumericMatrix loglik2, int n_inf, int n_sus, int with_rm, int sep1, int sep2);
RcppExport SEXP _hhdynamics_all_update(SEXP dataSEXP, SEXP dataorgSEXP, SEXP SISEXP, SEXP paraSEXP, SEXP memberSEXP, SEXP loglik1SEXP, SEXP loglik2SEXP, SEXP n_infSEXP, SEXP n_susSEXP, SEXP with_rmSEXP, SEXP sep1SEXP, SEXP sep2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dataorg(dataorgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SI(SISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type para(paraSEXP);
    Rcpp::traits::input_parameter< int >::type member(memberSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type loglik1(loglik1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type loglik2(loglik2SEXP);
    Rcpp::traits::input_parameter< int >::type n_inf(n_infSEXP);
    Rcpp::traits::input_parameter< int >::type n_sus(n_susSEXP);
    Rcpp::traits::input_parameter< int >::type with_rm(with_rmSEXP);
    Rcpp::traits::input_parameter< int >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< int >::type sep2(sep2SEXP);
    rcpp_result_gen = Rcpp::wrap(all_update(data, dataorg, SI, para, member, loglik1, loglik2, n_inf, n_sus, with_rm, sep1, sep2));
    return rcpp_result_gen;
END_RCPP
}
// mcmc
List mcmc(NumericMatrix data1, NumericVector SI, int mcmc_n, int burnin, int thinning, NumericVector int_para, NumericVector move, NumericVector sigma, int n_inf, int n_sus, int with_rm, int sep1, int sep2);
RcppExport SEXP _hhdynamics_mcmc(SEXP data1SEXP, SEXP SISEXP, SEXP mcmc_nSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP int_paraSEXP, SEXP moveSEXP, SEXP sigmaSEXP, SEXP n_infSEXP, SEXP n_susSEXP, SEXP with_rmSEXP, SEXP sep1SEXP, SEXP sep2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SI(SISEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_n(mcmc_nSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type int_para(int_paraSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type move(moveSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n_inf(n_infSEXP);
    Rcpp::traits::input_parameter< int >::type n_sus(n_susSEXP);
    Rcpp::traits::input_parameter< int >::type with_rm(with_rmSEXP);
    Rcpp::traits::input_parameter< int >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< int >::type sep2(sep2SEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc(data1, SI, mcmc_n, burnin, thinning, int_para, move, sigma, n_inf, n_sus, with_rm, sep1, sep2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hhdynamics_serial_density", (DL_FUNC) &_hhdynamics_serial_density, 2},
    {"_hhdynamics_prior_loglik", (DL_FUNC) &_hhdynamics_prior_loglik, 1},
    {"_hhdynamics_sim_data", (DL_FUNC) &_hhdynamics_sim_data, 8},
    {"_hhdynamics_loglik", (DL_FUNC) &_hhdynamics_loglik, 8},
    {"_hhdynamics_all_update", (DL_FUNC) &_hhdynamics_all_update, 12},
    {"_hhdynamics_mcmc", (DL_FUNC) &_hhdynamics_mcmc, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_hhdynamics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
